{"version":3,"sources":["components/backgrounds/continental-continental.svg","components/backgrounds/continental-continental-convergent.svg","components/backgrounds/continental-continental-divergent.svg","components/backgrounds/continental-oceanic.svg","components/backgrounds/continental-oceanic-convergent.svg","components/backgrounds/oceanic-oceanic.svg","components/backgrounds/oceanic-oceanic-convergent.svg","components/backgrounds/oceanic-oceanic-divergent.svg","components/backgrounds/convergent.svg","components/backgrounds/divergent.svg","components/backgrounds/Himalayas.png","components/backgrounds/aleutian-alaska-arc.jpg","components/backgrounds/andes.jpg","components/backgrounds/rift.jpg","components/backgrounds/mid-atlantic-ridge.jpg","State.js","components/Background.js","components/TopText.js","components/Button.js","components/ControlPanel.js","components/RealExamplesPanel.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","INIT_PLATE_STATES","END_PLATE_STATES","BOUNDARY_STATES","STATE_TEXT","cc","co","oo","c","d","ccd","ccc","coc","cod","ood","ooc","REAL_EXAMPLES_TEXT","INIT_TOP_TEXT","SCREEN_STATES","backgroundForState","state","CC","CCC","CCD","CO","COC","OO","OOC","OOD","boundaryForState","C","D","examplesForState","Mountain","Rift","Andes","IslandArc","Ridge","Background","props","hide","className","src","plateState","TopText","text","Button","style","backgroundImage","background","onClick","disabled","children","ControlPanel","Fragment","map","type","key","selected","boundaryState","RealExamplePanel","App","useState","selectedExample","selectExample","setPlateState","setBoundaryState","screenState","setScreenState","topText","setTopText","newBoundaryState","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0beb1ee8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/continental-continental.e77525ad.svg\";","module.exports = __webpack_public_path__ + \"static/media/continental-continental-convergent.ad6e5d23.svg\";","module.exports = __webpack_public_path__ + \"static/media/continental-continental-divergent.54462e61.svg\";","module.exports = __webpack_public_path__ + \"static/media/continental-oceanic.ca91ff73.svg\";","module.exports = __webpack_public_path__ + \"static/media/continental-oceanic-convergent.37bea61e.svg\";","module.exports = __webpack_public_path__ + \"static/media/oceanic-oceanic.2bd84ce2.svg\";","module.exports = __webpack_public_path__ + \"static/media/oceanic-oceanic-convergent.83b119cc.svg\";","module.exports = __webpack_public_path__ + \"static/media/oceanic-oceanic-divergent.0d0b4cd1.svg\";","module.exports = __webpack_public_path__ + \"static/media/convergent.52d2b5e3.svg\";","module.exports = __webpack_public_path__ + \"static/media/divergent.0cbabcaf.svg\";","module.exports = __webpack_public_path__ + \"static/media/Himalayas.7116b03f.png\";","module.exports = __webpack_public_path__ + \"static/media/aleutian-alaska-arc.a9593789.jpg\";","module.exports = __webpack_public_path__ + \"static/media/andes.d5ce643d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/rift.8972def4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mid-atlantic-ridge.4c5edc49.jpg\";","import React from \"react\";\nimport CC from \"./components/backgrounds/continental-continental.svg\";\nimport CCC from \"./components/backgrounds/continental-continental-convergent.svg\";\nimport CCD from \"./components/backgrounds/continental-continental-divergent.svg\";\nimport CO from \"./components/backgrounds/continental-oceanic.svg\";\nimport COC from \"./components/backgrounds/continental-oceanic-convergent.svg\";\nimport OO from \"./components/backgrounds/oceanic-oceanic.svg\";\nimport OOC from \"./components/backgrounds/oceanic-oceanic-convergent.svg\";\nimport OOD from \"./components/backgrounds/oceanic-oceanic-divergent.svg\";\nimport C from \"./components/backgrounds/convergent.svg\";\nimport D from \"./components/backgrounds/divergent.svg\";\nimport Mountain from \"./components/backgrounds/Himalayas.png\";\nimport IslandArc from \"./components/backgrounds/aleutian-alaska-arc.jpg\";\nimport Andes from \"./components/backgrounds/andes.jpg\";\nimport Rift from \"./components/backgrounds/rift.jpg\";\nimport Ridge from \"./components/backgrounds/mid-atlantic-ridge.jpg\";\n\nexport const INIT_PLATE_STATES = [\"cc\", \"co\", \"oo\"];\nexport const END_PLATE_STATES = [\"ccc\", \"ccd\", \"coc\", \"cod\", \"ooc\", \"ood\"];\nexport const BOUNDARY_STATES = [\"c\", \"d\"];\nexport const STATE_TEXT = {\n\tcc: \"Continental-continental\",\n\tco: \"Continental-oceanic\",\n\too: \"Oceanic-oceanic\",\n\tc: \"Convergent boundary\",\n\td: \"Divergent boundary\",\n\tccd: \"Rift\",\n\tccc: \"Mountain\",\n\tcoc: \"Subduction zone, mountains on land\",\n\tcod: \"Who knows? We don't.\",\n\tood: \"Mid-ocean ridge\",\n\tooc: \"Subduction zone, island arcs\"\n};\nexport const REAL_EXAMPLES_TEXT = {\n\tccd: \"East African Rift\",\n\tccc: \"Himalayas\",\n\tcoc: \"Andes Mountain Range\",\n\tood: \"Mid-Atlantic Ridge\",\n\tooc: \"Aleutian-Alaska Arc\"\n};\nexport const INIT_TOP_TEXT = \"Choose the plate boundary that created the\";\nexport const SCREEN_STATES = {\n\trealExampleSelection: 1,\n\tplateSelection: 2,\n\tcanStart: 3,\n\tcanRestart: 4\n};\n\nexport function backgroundForState(state) {\n\tswitch (state) {\n\t\tcase \"cc\":\n\t\t\treturn CC;\n\t\tcase \"ccc\":\n\t\t\treturn CCC;\n\t\tcase \"ccd\":\n\t\t\treturn CCD;\n\t\tcase \"co\":\n\t\tcase \"cod\":\n\t\t\treturn CO;\n\t\tcase \"coc\":\n\t\t\treturn COC;\n\t\tcase \"oo\":\n\t\t\treturn OO;\n\t\tcase \"ooc\":\n\t\t\treturn OOC;\n\t\tcase \"ood\":\n\t\t\treturn OOD;\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\nexport function boundaryForState(state) {\n\tswitch (state) {\n\t\tcase \"c\":\n\t\t\treturn C;\n\t\tcase \"d\":\n\t\t\treturn D;\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\nexport function examplesForState(state) {\n\tswitch (state) {\n\t\tcase \"ccc\":\n\t\t\treturn Mountain;\n\t\tcase \"ccd\":\n\t\t\treturn Rift;\n\t\tcase \"coc\":\n\t\t\treturn Andes;\n\t\tcase \"ooc\":\n\t\t\treturn IslandArc;\n\t\tcase \"ood\":\n\t\t\treturn Ridge;\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {INIT_PLATE_STATES, END_PLATE_STATES, backgroundForState} from \"../State\";\n\n\nBackground.propTypes = {\n\thide: PropTypes.bool,\n\tplateState: PropTypes.oneOf([...INIT_PLATE_STATES, ...END_PLATE_STATES])\n};\nfunction Background(props) {\n\tif (props.hide)\n\t\treturn null;\n\treturn (\n\t\t<div className=\"Background\">\n\t\t\t<img src={backgroundForState(props.plateState)}/>\n\t\t</div>\n\t);\n}\n\n\nexport default Background;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nTopText.propTypes = {\n    hide: PropTypes.bool,\n    text: PropTypes.string\n}\n\nfunction TopText(props) {\n    if (props.hide)\n        return null;\n\n    return (\n        <h1 className=\"TopText\">{props.text}</h1>\n    );\n}\n\nexport default TopText;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nButton.propTypes = {\n    hide: PropTypes.bool,\n    className: PropTypes.string,\n    selected: PropTypes.bool,\n    background: PropTypes.string,\n    disabled: PropTypes.bool,\n    onClick: PropTypes.func\n}\n\nfunction Button(props) {\n    if (props.hide)\n        return null;\n    return (\n        <div className={`Button ${props.className}`}\n             style={{backgroundImage: props.background ? `url(${props.background})` : null}}\n             onClick={props.disabled ? null : props.onClick}>{props.children}</div>\n    );\n}\n\nexport default Button;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"./Button\";\nimport {INIT_PLATE_STATES, END_PLATE_STATES, BOUNDARY_STATES, STATE_TEXT, backgroundForState, boundaryForState} from \"../State\";\n\nControlPanel.propTypes = {\n    onClick: PropTypes.func,\n    hide: PropTypes.bool,\n    plateState: PropTypes.oneOf([...INIT_PLATE_STATES, ...END_PLATE_STATES]),\n    boundaryState: PropTypes.oneOf([...BOUNDARY_STATES, \"\"])\n}\n\nfunction ControlPanel(props) {\n    if (props.hide)\n        return null;\n\n    return (\n        <React.Fragment>\n            <div className=\"PlateButtons\">\n                {INIT_PLATE_STATES.map(state => plateButtonOfType(props.plateState, state, props.onClick))}\n            </div>\n            <div className=\"BoundaryButtons\">\n                {BOUNDARY_STATES.map(state => boundaryButtonOfType(props.boundaryState, state, props.onClick))}\n            </div>\n        </React.Fragment>\n    );\n}\nfunction plateButtonOfType(plateState, type, onClick) {\n    return <Button\n        key={type}\n        onClick={() => onClick(type)}\n        selected={plateState === type}>\n        <img src={backgroundForState(type)}/>\n        <p>{STATE_TEXT[type]}</p>\n    </Button>;\n}\nfunction boundaryButtonOfType(boundaryState, type, onClick) {\n    return <Button\n        key={type}\n        onClick={() => onClick(type)}\n        selected={boundaryState === type}>\n        <img src={boundaryForState(type)}/>\n        <p>{STATE_TEXT[type]}</p>\n    </Button>;\n}\n\nexport default ControlPanel;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button from \"./Button\";\nimport {REAL_EXAMPLES_TEXT, END_PLATE_STATES, examplesForState} from \"../State\";\n\nRealExamplePanel.propTypes = {\n\thide: PropTypes.bool,\n\tonClick: PropTypes.func\n}\n\nfunction RealExamplePanel(props) {\n\tif (props.hide)\n\t\treturn null;\n\treturn (\n\t\t<div className=\"RealExamplePanel\">\n\t\t\t{END_PLATE_STATES.map(state => exampleButtonOfType(state, props.onClick))}\n\t\t</div>\n\t);\n}\nfunction exampleButtonOfType(type, onClick) {\n\tif (type === \"cod\")\n\t\treturn null;\n\treturn <Button\n\t\tkey={type}\n\t\tonClick={() => onClick(type)}\n\t\tbackground={examplesForState(type)}>\n\t\t<p>{REAL_EXAMPLES_TEXT[type]}</p>\n\t</Button>\n}\n\nexport default RealExamplePanel;","import React, {useState} from 'react';\nimport './App.css';\nimport Background from \"./components/Background\";\nimport TopText from \"./components/TopText\";\nimport ControlPanel from \"./components/ControlPanel\";\nimport {\n    BOUNDARY_STATES,\n    INIT_PLATE_STATES,\n    INIT_TOP_TEXT,\n    END_PLATE_STATES,\n    STATE_TEXT,\n    SCREEN_STATES,\n    examplesForState, REAL_EXAMPLES_TEXT\n} from \"./State\";\nimport RealExamplePanel from \"./components/RealExamplesPanel\";\nimport Button from \"./components/Button\";\n\nfunction App() {\n    const [selectedExample, selectExample] = useState(\"\");\n    const [plateState, setPlateState] = useState(INIT_PLATE_STATES[0]);\n    const [boundaryState, setBoundaryState] = useState(\"\");\n    const [screenState, setScreenState] = useState(SCREEN_STATES.realExampleSelection);\n    const [topText, setTopText] = useState(INIT_TOP_TEXT);\n\n    function onExampleButtonClicked(type) {\n        selectExample(type);\n        setTopText(`${INIT_TOP_TEXT} ${REAL_EXAMPLES_TEXT[type]}!`);\n        setScreenState(SCREEN_STATES.plateSelection);\n    }\n    function onControlButtonClicked(type) {\n        let newBoundaryState = boundaryState;\n        if (INIT_PLATE_STATES.includes(type))\n            setPlateState(type);\n        else if (BOUNDARY_STATES.includes(type)) {\n            newBoundaryState = type;\n            setBoundaryState(type);\n        }\n\n        //can start\n        if (newBoundaryState !== \"\") {\n            setTopText(\"Let's begin!\");\n            setScreenState(SCREEN_STATES.canStart);\n        }\n    }\n    function onStartClicked() {\n        setPlateState(plateState + boundaryState);\n        setTopText(STATE_TEXT[plateState + boundaryState]);\n        setScreenState(SCREEN_STATES.canRestart);\n    }\n    function onRestartClicked() {\n        setPlateState(INIT_PLATE_STATES[0]);\n        setBoundaryState(\"\");\n        setTopText(INIT_TOP_TEXT);\n        setScreenState(SCREEN_STATES.realExampleSelection);\n    }\n\n    return (\n        <div className=\"App\">\n            <RealExamplePanel\n                hide={screenState !== SCREEN_STATES.realExampleSelection}\n                onClick={onExampleButtonClicked} />\n            <TopText\n                hide={screenState === SCREEN_STATES.realExampleSelection}\n                text={topText}/>\n            <Button\n                hide={screenState === SCREEN_STATES.realExampleSelection}\n                className=\"SelectedExample\"\n                disabled={true}\n                background={examplesForState(selectedExample)}>\n                <p>{REAL_EXAMPLES_TEXT[selectedExample]}</p>\n            </Button>\n            <ControlPanel\n                hide={screenState !== SCREEN_STATES.plateSelection && screenState !== SCREEN_STATES.canStart}\n                onClick={onControlButtonClicked}\n                plateState={plateState}\n                boundaryState={boundaryState}/>\n            <Button\n                hide={screenState !== SCREEN_STATES.canStart}\n                className=\"StartRestartButton\"\n                onClick={onStartClicked}>\n                <p>Start</p>\n            </Button>\n            <Button\n                hide={screenState !== SCREEN_STATES.canRestart}\n                className=\"StartRestartButton\"\n                onClick={onRestartClicked}>\n                <p>Restart</p>\n            </Button>\n            <Background\n                hide={screenState === SCREEN_STATES.realExampleSelection}\n                plateState={plateState}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}