{"version":3,"sources":["components/Plate.js","components/Mantle.js","components/PlateTypeButton.js","components/ArrowButton.js","components/ControlPanel.js","components/Sky.js","components/PlateArc.js","components/HalfScreen.js","components/StartRestartButton.js","components/TopText.js","App.js","serviceWorker.js","index.js"],"names":["Plate","props","panel","leftPanel","plateType","continental","className","hidden","children","Mantle","PlateTypeButton","style","gridArea","orientation","backgroundColor","selected","onClick","ArrowButton","disabled","ControlPanel","state","plate","includes","direction","Sky","VALID_POSITIONS","PlateArc","active","position","HalfScreen","plateState","leftArc","rightArc","controlPanelState","StartRestartButton","TopText","text","PLATE_TYPES","VERTICAL_DIRECTIONS","HORIZONTAL_DIRECTIONS","END_STATE","INIT_TOP_TEXT","App","useState","canClickStartRestart","setCanClickStartRestart","clickedStart","setClickedStart","left","right","setControlPanelState","setPlateState","topText","setTopText","updateControlPanelState","currentState","clickedButton","side","newState","disabledDirections","undefined","newPlateState","plateBoundaryResult","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c9952c3c.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../App.css\";\n\nPlate.propTypes = {\n    leftPanel: PropTypes.bool,\n    continental: PropTypes.bool\n}\n\nfunction Plate(props) {\n    const panel = props.leftPanel ? \"Left\" : \"Right\";\n    const plateType = props.continental ? \"PlateLand\" : \"PlateUnderOcean\";\n    return (\n        <div className=\"Plate\">\n            <div className={`PlateOcean Plate${panel}`} hidden={props.continental}/>\n            <div className={`${plateType} Plate${panel}`}/>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Plate;","import React from \"react\";\n\nfunction Mantle() {\n    return (\n        <div className=\"Mantle\"></div>\n    );\n}\n\nexport default Mantle;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nPlateTypeButton.propTypes = {\n    orientation: PropTypes.oneOf([\"left-plate\", \"right-plate\"]),\n    selected: PropTypes.bool,\n    onClick: PropTypes.func\n}\n\nfunction PlateTypeButton(props) {\n    return (\n        <div className=\"PlateTypeButton\"\n             style={{gridArea: props.orientation,\n                backgroundColor: props.selected ? \"mediumaquamarine\" : \"aquamarine\"}}\n             onClick={props.onClick}/>\n    );\n}\n\nexport default PlateTypeButton;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nArrowButton.propTypes = {\n    orientation: PropTypes.oneOf([\"up\", \"down\", \"left\", \"right\"]),\n    disabled: PropTypes.bool,\n    selected: PropTypes.bool,\n    onClick: PropTypes.func\n}\n\nfunction ArrowButton(props) {\n    return (\n        <button className=\"ArrowButton\"\n                style={{gridArea: props.orientation,\n                    backgroundColor: props.selected ? \"yellow\" : \"lightyellow\"}}\n                disabled={props.disabled}\n                onClick={props.onClick}/>\n    );\n}\n\nexport default ArrowButton;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport PlateTypeButton from \"./PlateTypeButton\";\nimport ArrowButton from \"./ArrowButton\";\n\nControlPanel.propTypes = {\n    onClick: PropTypes.func,\n    state: PropTypes.object\n}\n\nfunction ControlPanel(props) {\n    return (\n        <div className=\"ControlPanel\">\n            <PlateTypeButton orientation={\"left-plate\"} onClick={() => props.onClick(\"left-plate\")}\n                    selected={props.state.plate === \"left-plate\"}/>\n            <PlateTypeButton orientation={\"right-plate\"} onClick={() => props.onClick(\"right-plate\")}\n                    selected={props.state.plate === \"right-plate\"}/>\n            <div className=\"ArrowButtonContainer\">\n                <ArrowButton orientation={\"up\"} onClick={() => props.onClick(\"up\")}\n                    disabled={props.state.disabled?.includes(\"up\")}\n                    selected={props.state.direction === \"up\"}/>\n                <ArrowButton orientation={\"left\"} onClick={() => props.onClick(\"left\")}\n                    disabled={props.state.disabled?.includes(\"left\")}\n                    selected={props.state.direction === \"left\"}/>\n                <ArrowButton orientation={\"right\"} onClick={() => props.onClick(\"right\")}\n                    disabled={props.state.disabled?.includes(\"right\")}\n                    selected={props.state.direction === \"right\"}/>\n                <ArrowButton orientation={\"down\"} onClick={() => props.onClick(\"down\")}\n                    disabled={props.state.disabled?.includes(\"down\")}\n                    selected={props.state.direction === \"down\"}/>\n            </div>\n        </div>\n    );\n}\n\nexport default ControlPanel;","import React from \"react\";\n\nfunction Sky() {\n    return (\n        <div className=\"Sky\"/>\n    );\n}\n\nexport default Sky;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport './PlateArc.css';\n\nconst VALID_POSITIONS = [\"CenterDown\", \"CenterUp\", \"SideUp\"];\nPlateArc.propTypes = {\n\tleftPanel: PropTypes.bool,\n\tposition: PropTypes.string\n};\n\nfunction PlateArc(props) {\n\tconst panel = props.leftPanel ? \"Left\" : \"Right\";\n\tconst active = VALID_POSITIONS.includes(props.position);\n\n\treturn (\n\t\t<div className={`PlateArc${props.position}${panel} PlateArc`} hidden={!active}>\n\t\t\t<div className={`SpinningMask SpinningMask${panel}`}/>\n\t\t\t<div className={`InnerMask InnerMask${panel}`}/>\n\t\t\t<div className={`Mountain Mountain${panel}`}/>\n\t\t</div>\n\t);\n}\n\nexport default PlateArc;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Plate from \"./Plate\";\nimport Mantle from \"./Mantle\";\nimport ControlPanel from \"./ControlPanel\";\nimport Sky from \"./Sky\";\nimport PlateArc from \"./PlateArc\";\n\nHalfScreen.propTypes = {\n    onClick: PropTypes.func,\n    controlPanelState: PropTypes.object,\n    plateState: PropTypes.object,\n    continental: PropTypes.bool,\n    leftPanel: PropTypes.bool\n}\n\nfunction HalfScreen(props) {\n    return (\n        <div className=\"HalfScreen\">\n            <Sky/>\n            <Plate leftPanel={props.leftPanel} continental={props.continental}>\n                <PlateArc leftPanel={props.leftPanel} position={props.leftPanel ?\n                    props.plateState.leftArc : props.plateState.rightArc}/>\n            </Plate>\n            <Mantle/>\n            <ControlPanel onClick={props.onClick} state={props.controlPanelState}/>\n        </div>\n    )\n}\n\nexport default HalfScreen;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nStartRestartButton.propTypes = {\n    onClick: PropTypes.func,\n    disabled: PropTypes.bool\n}\n\nfunction StartRestartButton(props) {\n    return (\n        <button className=\"StartRestartButton\" onClick={props.onClick} disabled={props.disabled}/>\n    );\n}\n\nexport default StartRestartButton;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nTopText.propTypes = {\n    text: PropTypes.string\n}\n\nfunction TopText(props) {\n    return (\n        <h1 className=\"TopText\">{props.text}</h1>\n    );\n}\n\nexport default TopText;","import React, {useState} from 'react';\nimport './App.css';\nimport HalfScreen from \"./components/HalfScreen\";\nimport StartRestartButton from \"./components/StartRestartButton\";\nimport TopText from \"./components/TopText\";\n\nconst PLATE_TYPES = [\"left-plate\", \"right-plate\"];\nconst VERTICAL_DIRECTIONS = [\"up\", \"down\"];\nconst HORIZONTAL_DIRECTIONS = [\"left\", \"right\"];\nconst END_STATE = { //co = continental-oceanic, oc = oceanic-continental, etc\n    fault: { //cc\n        text: \"Fault\"\n    },\n    rift: { //cc\n        text: \"Rift\"\n    },\n    mountain: { //cc\n        text: \"Mountain\",\n        leftArc: \"CenterUp\",\n        rightArc: \"CenterUp\"\n    },\n    coSubductionMountain: { //co\n        text: \"Subduction zone, mountains on land\",\n        rightArc: \"CenterDown\",\n        leftArc: \"SideUp\"\n    },\n    ocSubductionMountain: { //oc\n        text: \"Subduction zone, mountains on land\",\n        leftArc: \"CenterDown\",\n        rightArc: \"SideUp\"\n    },\n    tsunamis: { //oo\n        text: \"Tsunamis\"\n    },\n    midOceanRidge: { //oo\n        text: \"Mid-ocean ridge\",\n        leftArc: \"CenterDown\",\n        rightArc: \"CenterDown\"\n    },\n    subduction: { //oo\n        text: \"Subduction zone\",\n        leftArc: \"CenterDown\"\n    },\n    default: {\n        text: \"Who knows? We don't.\"\n    }\n};\n\nconst INIT_TOP_TEXT = \"Choose a plate type and direction of movement to begin!\";\n\n/**\n * currentState = {\n *     left: {\n *         plate: \"left-plate\" or \"right-plate\",\n *         direction: \"up\", \"down\", \"left\", or \"right\",\n *         disabled: [] //array of values above\n *     },\n *     right: {} //similar\n * }\n */\n\n// assume that left-plate = continental, right-plate = oceanic\nfunction plateBoundaryResult(controlPanelState) {\n    if (controlPanelState.left.plate === \"left-plate\") {\n        if (controlPanelState.right.plate === \"left-plate\") {\n            // continental-continental\n            if (controlPanelState.left.direction === \"up\" || controlPanelState.left.direction === \"down\")\n                return END_STATE.fault; // transform\n            else if (controlPanelState.left.direction === \"left\")\n                return END_STATE.rift; // divergent\n            else\n                return END_STATE.mountain; // convergent\n        }\n        else {\n            // continental-oceanic\n            if (controlPanelState.left.direction === \"up\" || controlPanelState.left.direction === \"down\")\n                return END_STATE.coSubductionMountain; // transform\n            else if (controlPanelState.left.direction === \"left\")\n                return END_STATE.default; // divergent\n            else\n                return END_STATE.coSubductionMountain; // convergent\n        }\n    }\n    else {\n        if (controlPanelState.right.plate === \"left-plate\") {\n            // oceanic-continental\n            if (controlPanelState.left.direction === \"up\" || controlPanelState.left.direction === \"down\")\n                return END_STATE.ocSubductionMountain; // transform\n            else if (controlPanelState.left.direction === \"left\")\n                return END_STATE.default; // divergent\n            else\n                return END_STATE.ocSubductionMountain; // convergent\n        }\n        else {\n            // oceanic-oceanic\n            if (controlPanelState.left.direction === \"up\" || controlPanelState.left.direction === \"down\")\n                return END_STATE.tsunamis; // transform\n            else if (controlPanelState.left.direction === \"left\")\n                return END_STATE.midOceanRidge; // divergent\n            else\n                return END_STATE.subduction; // convergent\n        }\n    }\n}\n\nfunction App() {\n    const [canClickStartRestart, setCanClickStartRestart] = useState(false);\n    const [clickedStart, setClickedStart] = useState(false);\n    const [controlPanelState, setControlPanelState] = useState({left: {}, right: {}});\n    const [plateState, setPlateState] = useState({});\n    const [topText, setTopText] = useState(INIT_TOP_TEXT);\n\n    function updateControlPanelState(currentState, clickedButton, side) {\n        let newState = {...currentState};\n        if (PLATE_TYPES.includes(clickedButton))\n            newState[side].plate = clickedButton;\n        else {\n            newState[side].direction = clickedButton;\n\n            // disable moving both plates in the same direction or perpendicular directions\n            const disabledDirections = VERTICAL_DIRECTIONS.includes(clickedButton) ?\n                [...HORIZONTAL_DIRECTIONS, clickedButton] : [...VERTICAL_DIRECTIONS, clickedButton];\n            if (side === \"left\")\n                newState.right.disabled = disabledDirections;\n            else\n                newState.left.disabled = disabledDirections;\n        }\n        //allowed to start if plate type & directions defined for both panels\n        if (newState.right.plate !== undefined && newState.right.direction !== undefined &&\n            newState.left.plate !== undefined && newState.left.direction !== undefined)\n            setCanClickStartRestart(true);\n        setControlPanelState(newState);\n    }\n\n    function onStartRestartClicked() {\n        // restart (we've clicked start, now we're clicking again)\n        if (clickedStart) {\n            setControlPanelState({left: {}, right: {}});\n            setCanClickStartRestart(false);\n            setClickedStart(false);\n            setTopText(INIT_TOP_TEXT);\n            setPlateState({});\n        }\n        else {\n            setClickedStart(true);\n            const newPlateState = plateBoundaryResult(controlPanelState);\n            setPlateState(newPlateState);\n            setTopText(`${newPlateState.text}\\n` +\n                \"Click the restart button to try another combo!\");\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <HalfScreen onClick={(clickedButton) => updateControlPanelState(controlPanelState, clickedButton, \"left\")}\n                        controlPanelState={controlPanelState.left}\n                        continental={controlPanelState.left.plate !== \"right-plate\"} //default to continental (so we use !==)\n                        plateState={plateState}\n                        leftPanel={true}/>\n            <HalfScreen onClick={(clickedButton) => updateControlPanelState(controlPanelState, clickedButton, \"right\")}\n                        controlPanelState={controlPanelState.right}\n                        continental={controlPanelState.right.plate !== \"right-plate\"}\n                        plateState={plateState}\n                        leftPanel={false}/>\n            <StartRestartButton onClick={onStartRestartClicked} disabled={!canClickStartRestart}/>\n            <TopText text={topText}/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}